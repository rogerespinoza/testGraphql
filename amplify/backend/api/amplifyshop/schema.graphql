type SensorValue
  @model(subscriptions: null)
  @auth(
    rules: [
      {allow: private, provider: iam}
      {allow: private, provider: userPools}
    ]
  ) {
  id: ID!
  sensorId: String!
  color: String!
  IO: String
}

type Subscription {
  onUpdateSensorValue(sensorId: String!): SensorValue
    @aws_subscribe(mutations: ["updateSensorValue"])
}

type Query {
  getSensor(sensorId: String!): SensorValue
  functionPubSend(payload: String!): String
    @function(name: "functionIotPub01-${env}")
}










type Users @model {
  id: ID!
  devices: [DeviceUser] @connection(keyName: "users", fields: ["id"])
}

type DeviceUser 
  @model
  @key(name: "users", fields: ["idUser"]){
  id: ID
  idUser: ID
  idDevice: ID!
  device: DeviceData @connection(fields: ["idDevice"])
}

type SW1 @model {
  id: ID!
  payload: String
  deviceData: DeviceData @connection(fields: ["id"])
  linkedDevice: [LinkedDevice] @connection(keyName: "device", fields: ["id"])
}

type SW2 @model {
  id: ID!
  payload: String
  deviceData: DeviceData @connection(fields: ["id"])
  linkedDevice: [LinkedDevice] @connection(keyName: "device", fields: ["id"])
}

type DeviceData @model{
  id: ID
  config: String
  links: Int
  maxLinks: Int
  key: String
  model: String
  type: String
  topic: String
}

type LinkedDevice
  @model
  @key(name: "device", fields: ["linkDevId", "dev", "name"]) {
  id: ID!
  linkDevId: ID!
  dev: String
  name: String
}

